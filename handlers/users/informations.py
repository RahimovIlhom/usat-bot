from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.exceptions import WrongFileIdentifier, BadRequest

from data.data_texts import INFORMATION_TEXTS, DIRECTIONS_EDU_INFO_UZ, DIRECTIONS_EDU_INFO_RU, CONTRACT_INFO_UZ, \
    CONTRACT_INFO_RU
from filters import IsPrivate
from keyboards.default import sub_menu_markup_uz, sub_menu_markup_ru, directions_uz_markup, directions_ru_markup
from loader import dp, db


@dp.message_handler(IsPrivate(), text="‚ÑπÔ∏è Ma'lumotlar")
async def other_information(msg: types.Message):
    await msg.answer(msg.text, reply_markup=sub_menu_markup_uz)


@dp.message_handler(IsPrivate(), text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def other_information(msg: types.Message):
    await msg.answer(msg.text, reply_markup=sub_menu_markup_ru)


@dp.message_handler(IsPrivate(), text=["üè¢ Universitet haqida ma'lumot", "üè¢ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ"])
async def other_information(msg: types.Message):
    lang = 'uz' if msg.text == "üè¢ Universitet haqida ma'lumot" else 'ru'
    image_url = 'https://telegra.ph//file/cef381153d9f64cb45b12.jpg'
    try:
        await msg.answer_photo(photo=image_url, caption=INFORMATION_TEXTS[lang], parse_mode=types.ParseMode.MARKDOWN)
    except (WrongFileIdentifier, BadRequest, ValueError, Exception):
        await msg.answer(INFORMATION_TEXTS[lang], parse_mode=types.ParseMode.MARKDOWN)


@dp.message_handler(IsPrivate(),
                    text=["üë®‚Äçüéì Universitetdagi ta'lim yo'nalishlari", "üë®‚Äçüéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ"])
async def direction_of_education_information(msg: types.Message):
    lang = 'uz' if msg.text == "üë®‚Äçüéì Universitetdagi ta'lim yo'nalishlari" else 'ru'

    response_text = {
        'uz': "üë®‚Äçüéì Universitetdagi ta'lim yo'nalishlari.\nBatafsil ma'lumot olish uchun ta'lim yo'nalishini tanlang.",
        'ru': "üë®‚Äçüéì –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ\n–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ "
              "–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è."
    }
    markup = await directions_uz_markup() if lang == 'uz' else await directions_ru_markup()

    await msg.answer(response_text[lang], reply_markup=markup)


@dp.message_handler(IsPrivate(), text=DIRECTIONS_EDU_INFO_UZ.keys())
async def direction_info_uz(msg: types.Message):
    direction = msg.text
    info = DIRECTIONS_EDU_INFO_UZ[direction]

    response = (
        f"üìù Yo'nalish: {direction}\n\n"
        f"‚ÑπÔ∏è Yo‚Äônalish haqida ma‚Äôlumot:\n{info['Yo‚Äônalish haqida ma‚Äôlumot']}\n\n"
        f"üéì 2024/2025-yil uchun qabul kvotasi:\n{info['2024/2025-yil uchun qabul kvotasi']}\n\n"
        f"üìã Ushbu yo'nalish bo'yicha imtihonda tushadigan fanlar kesimidagi savollar soni va baholash mezoni:"
        f"\n{info['Qabul qilinish talablari']}"
    )
    try:
        await msg.answer_photo(photo=info['image'])
    except BadRequest:
        pass

    await msg.answer(response)


@dp.message_handler(IsPrivate(), text=DIRECTIONS_EDU_INFO_RU.keys())
async def direction_info_ru(msg: types.Message):
    direction = msg.text
    info = DIRECTIONS_EDU_INFO_RU[direction]

    response = (
        f"üìù –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n\n"
        f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:\n{info['–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏']}\n\n"
        f"üéì –ö–≤–æ—Ç–∞ –Ω–∞ 2024/2025 –≥–æ–¥:\n{info['–ö–≤–æ—Ç–∞ –Ω–∞ 2024/2025 –≥–æ–¥']}\n\n"
        f"üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é:\n{info['–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—é']}"
    )
    try:
        await msg.answer_photo(photo=info['image'])
    except BadRequest:
        pass

    await msg.answer(response)


@dp.message_handler(IsPrivate(), text=["üè∑Ô∏è Kontrakt summalari", "üè∑Ô∏è –°—É–º–º—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"])
async def contract_information(msg: types.Message):
    lang = 'uz' if msg.text == "üè∑Ô∏è Kontrakt summalari" else 'ru'

    if lang == 'uz':
        contract_info = CONTRACT_INFO_UZ
        response = "üìã Barcha yo'nalishlar bo'yicha o'qish davomiyligi va kontrakt summalari:\n\n"
    else:
        contract_info = CONTRACT_INFO_RU
        response = "üìã –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –∏ —Å—É–º–º—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:\n\n"

    for direction, info in contract_info.items():
        response += f"üîπ {direction}\n"
        for form, price in info.items():
            response += f"   {form}: {price}\n"
        response += "\n"

    await msg.answer(response)


# # Function to fetch and show directions with inline buttons
# async def show_directions(msg: types.Message, lang: str):
#     directions = await db.select_directions()
#     if not directions:
#         no_contracts_text = {
#             'uz': "Hozirda hech qanday kontrakt summasi mavjud emas.",
#             'ru': "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å—É–º–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤."
#         }
#         await msg.answer(no_contracts_text[lang])
#         return
#
#     # Create inline keyboard with directions
#     keyboard = InlineKeyboardMarkup()
#     for direction in directions:
#         direction_id, name_uz, name_ru, active = direction
#         if active:
#             keyboard.add(InlineKeyboardButton(
#                 text=f"üîπ {name_uz}" if lang == 'uz' else f"üîπ {name_ru}",
#                 callback_data=f"direction_{direction_id}_{lang}"
#             ))
#
#     # Add Close button
#     keyboard.add(InlineKeyboardButton(
#         text="‚úñÔ∏è Yopish" if lang == 'uz' else "‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å",
#         callback_data=f"close_{lang}"
#     ))
#     try:
#         await msg.edit_text(
#             text="üë®‚Äçüéì Qaysi ta'lim yo'nalishi bo'yicha kontrakt summasini ko'rmoqchisiz?"
#             if lang == 'uz' else "üë®‚Äçüéì –ü–æ –∫–∞–∫–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å—É–º–º—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤?",
#             reply_markup=keyboard
#         )
#     except BadRequest:
#         await msg.answer(
#             text="üë®‚Äçüéì Qaysi ta'lim yo'nalishi bo'yicha kontrakt summasini ko'rmoqchisiz?"
#             if lang == 'uz' else "üë®‚Äçüéì –ü–æ –∫–∞–∫–æ–º—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å —Å—É–º–º—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤?",
#             reply_markup=keyboard
#         )
#
#
# # Function to display contract prices for a selected direction
# async def show_contract_prices(callback_query: types.CallbackQuery, lang: str, direction_id: int):
#     contracts = await db.select_contract_prices_for_direction(direction_id)
#     if not contracts:
#         no_contracts_text = {
#             'uz': "Hozirda hech qanday kontrakt summasi mavjud emas.",
#             'ru': "–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç —Å—É–º–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤."
#         }
#         await callback_query.message.edit_text(no_contracts_text[lang])
#         return
#
#     # Create response text with contract prices
#     response_text = {
#         'uz': "üè∑Ô∏è Kontrakt summalari:\n\n",
#         'ru': "üè∑Ô∏è –°—É–º–º—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤:\n\n"
#     }
#     for contract in contracts:
#         _, _, amount, name_uz, name_ru = contract
#         formatted_amount = f"{int(amount):,}".replace(",", " ")  # Format amount with spaces
#         response_text['uz'] += f"üîπ {name_uz}: {formatted_amount} so'm\n"
#         response_text['ru'] += f"üîπ {name_ru}: {formatted_amount} —Å—É–º\n"
#
#     # Create inline keyboard with Back and Close buttons
#     keyboard = InlineKeyboardMarkup()
#     keyboard.add(InlineKeyboardButton(
#         text="‚¨ÖÔ∏è Orqaga" if lang == 'uz' else "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
#         callback_data=f"back_{lang}"
#     ))
#     keyboard.add(InlineKeyboardButton(
#         text="‚úñÔ∏è Yopish" if lang == 'uz' else "‚úñÔ∏è –ó–∞–∫—Ä—ã—Ç—å",
#         callback_data=f"close_{lang}"
#     ))
#
#     await callback_query.message.edit_text(response_text[lang], reply_markup=keyboard)
#
#
# # Function to handle back button press
# async def handle_back(callback_query: types.CallbackQuery, lang: str):
#     await show_directions(callback_query.message, lang)
#
#
# # Function to handle close button press
# async def handle_close(callback_query: types.CallbackQuery):
#     await callback_query.message.delete()
#
#
# # Registering the callback query handlers
# @dp.callback_query_handler(lambda c: c.data.startswith('direction_'))
# async def process_direction_callback(callback_query: types.CallbackQuery):
#     data = callback_query.data.split('_')
#     direction_id = int(data[1])
#     lang = data[2]
#     await show_contract_prices(callback_query, lang, direction_id)
#
#
# @dp.callback_query_handler(lambda c: c.data.startswith('back_'))
# async def process_back_callback(callback_query: types.CallbackQuery):
#     lang = callback_query.data.split('_')[1]
#     await handle_back(callback_query, lang)
#
#
# @dp.callback_query_handler(lambda c: c.data.startswith('close_'))
# async def process_close_callback(callback_query: types.CallbackQuery):
#     await handle_close(callback_query)
#
#
# # Main handler for contract information
# @dp.message_handler(IsPrivate(), text=["üè∑Ô∏è Kontrakt summalari", "üè∑Ô∏è –°—É–º–º—ã –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤"])
# async def contract_information(msg: types.Message):
#     lang = 'uz' if msg.text == "üè∑Ô∏è Kontrakt summalari" else 'ru'
#     await show_directions(msg, lang)
