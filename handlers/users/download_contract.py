import os

from aiogram.types import Message, InputFile

from filters import IsPrivate
from loader import dp, db
from utils.db_api import get_contract_data_in_admission
from utils.misc.generate_contract_file import generate_pdf
from utils.misc.send_contract_file_telegraph import contract_file_link

TEXTS = {
    'uz': {
        'NOT_FOUND': "‚ùóÔ∏è Siz yubormagansiz!",
        'DRAFT': "‚ùóÔ∏è Kontrakt fayl mavjud emas. Arizangiz hali tayyor emas. Iltimos, arizangizni yuboring.",
        'SUBMITTED': "‚ùóÔ∏è Kontrakt fayl mavjud emas. Arizangiz yuborilgan. Iltimos, arizangiz qabul qilinishini kuting.",
        'REJECTED': ("üòî Kontrakt fayl mavjud emas. Afsuski, arizangiz tasdiqlanmadi. Iltimos, kiritgan "
                     "ma‚Äôlumotlaringizni tekshirib, yana boshqatdan yuboring."),
        'FAILED': ("Kontrakt fayl mavjud emas. Afsuski siz imtihondan yiqilgansiz. Iltimos, \"üßë‚Äçüíª Imtihon "
                   "topshirish\" tugmasi orqali qayta imtihon topshiring"),
        'EXAMINED': "‚úÖ Kontrakt fayl mavjud emas. Siz imtihon topshirib bo'lgansiz! Iltimos, natijangizni kuting",
        'ACCEPTED': ("‚úÖ Kontrakt fayl mavjud emas. Arizangiz tasdiqlangan. Iltimos, \"üßë‚Äçüíª Imtihon topshirish\" tugmasi "
                     "orqali imtihon topshiring"),
        'NOT_READY': "Kontrakt faylingiz hali tayyor emas. Iltimos, keyinroq qayta urining.",
    },
    'ru': {
        'NOT_FOUND': "‚ùóÔ∏è –í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏!",
        'DRAFT': "‚ùóÔ∏è –§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –∑–∞—è–≤–∫—É.",
        'SUBMITTED': "‚ùóÔ∏è –§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –ø—Ä–∏–Ω—è—Ç–∏—è –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏.",
        'REJECTED': ("üòî –§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ "
                     "–≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ."),
        'FAILED': ("–§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —ç–∫–∑–∞–º–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üßë‚Äçüíª "
                   "–°–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω\" –∏ —Å–¥–∞–π—Ç–µ —ç–∫–∑–∞–º–µ–Ω —Å–Ω–æ–≤–∞."),
        'EXAMINED': "‚úÖ –§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í—ã —É–∂–µ —Å–¥–∞–ª–∏ —ç–∫–∑–∞–º–µ–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. ",
        'ACCEPTED': ("‚úÖ –§–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "
                     "\"üßë‚Äçüíª –°–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω\" –∏ —Å–¥–∞–π—Ç–µ —ç–∫–∑–∞–º–µ–Ω."),
        'NOT_READY': "–í–∞—à —Ñ–∞–π–ª –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    }
}


@dp.message_handler(IsPrivate(), text=['üì• Shartnomani olish', 'üì• –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç'])
async def download_contract(msg: Message):
    lang = 'uz' if msg.text == 'üì• Shartnomani olish' else 'ru'
    applicant_obj = await db.get_applicant(msg.from_user.id)
    if applicant_obj is None:
        await msg.answer(TEXTS[lang]['NOT_FOUND'])
        return
    else:
        status = applicant_obj[14]
        if status == 'PASSED':
            contract_file = applicant_obj[11]
            if not contract_file:
                response = await get_contract_data_in_admission(msg.from_user.id)
                if response.status_code == 200:
                    data = response.json()
                    contract_file_path = await generate_pdf(data)
                    input_file = InputFile(contract_file_path)
                    await msg.answer_document(input_file)
                    os.remove(contract_file_path)
                    # contract_file_url = await contract_file_link(data['fullName'], contract_file_path)
                    # await db.update_contract_file(msg.from_user.id, contract_file_url)
                    return
                else:
                    status = 'NOT_READY'

            else:
                input_file = InputFile(contract_file)
                await msg.answer_document(input_file)
                return

    await msg.answer(TEXTS[lang][status])
