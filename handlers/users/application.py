import asyncio
from datetime import datetime

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType, ReplyKeyboardRemove

from filters import IsPrivate
from keyboards.default import phone_markup_uz, phone_markup_ru, menu_markup_uz, menu_markup_ru
from keyboards.inline import all_faculties_inlines, application_callback_data, types_and_contracts, \
    choices_e_edu_language
from loader import dp, db
from states import ApplicantRegisterStates
from utils.db_api import signup_applicant, get_applicant_in_admission, submit_applicant_for_admission


@dp.message_handler(IsPrivate(), text="üì∞ Universitetga hujjat topshirish")
async def submit_application_uz(msg: types.Message, state: FSMContext):
    simple_user = await db.select_simple_user(msg.from_user.id)
    await state.set_data({'language': simple_user[2]})
    applicant = await db.get_applicant(msg.from_user.id)
    if applicant:
        if applicant[14] == 'DRAFT':
            await show_faculties(msg, 'uz', f"{applicant[4]} {applicant[5]}")
            await state.set_state(ApplicantRegisterStates.direction_type_lan)
            await state.update_data({
                'fullname': applicant[4] + ' ' + applicant[5],
                'tgId': applicant[0],
                'firstName': applicant[4],
                'lastName': applicant[5],
                'middleName': applicant[6],
                'applicantNumber': applicant[15],
                'birthDate': applicant[16],
                'gender': applicant[17],
                'passport': applicant[7],
                'pinfl': applicant[3],
                'additionalPhoneNumber': applicant[2],
                'photo': applicant[18],
                'applicantId': applicant[19],
            })
            return
        await msg.answer("‚ùóÔ∏è Siz allaqachon hujjat topshirib bo'lgansiz!")
    else:
        await msg.answer("Pastdagi tugmani bosib, telefon raqamingizni yuboring.", reply_markup=phone_markup_uz)
        await state.set_state(ApplicantRegisterStates.phone)
        await state.update_data({'tgId': msg.from_user.id})


@dp.message_handler(IsPrivate(), text="üì∞ –ü–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç")
async def submit_application_ru(msg: types.Message, state: FSMContext):
    simple_user = await db.select_simple_user(msg.from_user.id)
    await state.set_data({'language': simple_user[2]})
    applicant = await db.get_applicant(msg.from_user.id)
    if applicant:
        if applicant[14] == 'DRAFT':
            await show_faculties(msg, 'ru', f"{applicant[4]} {applicant[5]}")
            await state.set_state(ApplicantRegisterStates.direction_type_lan)
            await state.update_data({
                'fullname': applicant[4] + ' ' + applicant[5],
                'tgId': applicant[0],
                'firstName': applicant[4],
                'lastName': applicant[5],
                'middleName': applicant[6],
                'applicantNumber': applicant[15],
                'birthDate': applicant[16],
                'gender': applicant[17],
                'passport': applicant[7],
                'pinfl': applicant[3],
                'additionalPhoneNumber': applicant[2],
                'photo': applicant[18]
            })
            return
        await msg.answer("‚ùóÔ∏è –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã!")
    else:
        await msg.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=phone_markup_ru)
        await state.set_state(ApplicantRegisterStates.phone)
        await state.update_data({'tgId': msg.from_user.id})


@dp.message_handler(IsPrivate(), content_types=ContentType.CONTACT, state=ApplicantRegisterStates.phone)
async def send_contact(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    await state.update_data({'phoneNumber': msg.contact.phone_number})
    if data.get('language') == 'uz':
        info = "Qo'shimcha telefon raqam yuboring."
    else:
        info = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    await msg.answer(info, reply_markup=ReplyKeyboardRemove())
    await ApplicantRegisterStates.next()


@dp.message_handler(IsPrivate(), content_types=ContentType.ANY, state=ApplicantRegisterStates.phone)
async def send_contact(msg: types.Message):
    await msg.delete()
    simple_user = await db.select_simple_user(msg.from_user.id)
    if simple_user[2] == 'uz':
        info = "Iltimos, pastdagi tugmani bosib, telefon raqamingizni yuboring."
        markup = phone_markup_uz
    else:
        info = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        markup = phone_markup_ru
    await msg.answer(info, reply_markup=markup)


@dp.message_handler(IsPrivate(), regexp=r"^\+?(998)?[0-9]{2}[-\s\.]?[0-9]{3}[-\s\.]?[0-9]{2}[-\s\.]?[0-9]{2}$",
                    state=ApplicantRegisterStates.additional_phone)
async def send_contact(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    user_language = data.get('language')

    if msg.text in data.get('phoneNumber'):
        message_text = "‚ùóÔ∏è Qo'shimcha telefon raqam asosiy raqam bilan bir xil. Iltimos, qayta yuboring." \
            if user_language == 'uz' \
            else "‚ùóÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–º—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ."
        await msg.answer(message_text)
        return

    await state.update_data({'additionalPhoneNumber': msg.text})

    if user_language == 'uz':
        info = "Passportingiz seriasi va raqamini yuboring.\n\nMisol uchun: AA1234567"
    else:
        info = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ—Ä–∏—é –∏ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –ø–∞—Å–ø–æ—Ä—Ç–∞.\n\n–ü—Ä–∏–º–µ—Ä: AA1234567"

    await msg.answer(info, reply_markup=ReplyKeyboardRemove())
    await ApplicantRegisterStates.next()


@dp.message_handler(IsPrivate(), content_types=ContentType.ANY, state=ApplicantRegisterStates.additional_phone)
async def send_contact(msg: types.Message):
    await msg.delete()
    simple_user = await db.select_simple_user(msg.from_user.id)
    if simple_user[2] == 'uz':
        info = "‚ùóÔ∏è Qo'shimcha telefon raqamingiz xato. Iltimos, qayta yuboring."
    else:
        info = "‚ùóÔ∏è –í–∞—à –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ–≤–µ—Ä–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ."
    await msg.answer(info)


@dp.message_handler(state=ApplicantRegisterStates.passport, regexp=r'^[A-Z]{2}\d{7}$', content_types=ContentType.TEXT)
async def send_passport(msg: types.Message, state: FSMContext):
    TEXTS = {
        'uz': "Tug'ilgan sanangizni yuboring.\n\nMisol uchun: 01.01.2000 yoki 01-01-2000",
        'ru': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è.\n\n–ü—Ä–∏–º–µ—Ä: 01.01.2000 –∏–ª–∏ 01-01-2000",
    }
    passport = msg.text
    data = await state.get_data()
    await state.update_data({'passport': passport.upper()})
    await msg.answer(TEXTS[data.get('language')])
    await ApplicantRegisterStates.next()


@dp.message_handler(state=ApplicantRegisterStates.passport, content_types=ContentType.ANY)
async def err_send_passport(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    await msg.delete()
    TEXTS = {
        'uz': {
            'err_text': "‚ùóÔ∏è Pasport seria va raqam xato. Iltimos, quyidagi tartibda yuboring.\n\n<b>AA1234567</b>",
        },
        'ru': {
            'err_text': "‚ùóÔ∏è –°–µ—Ä–∏—è –∏ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–ª–µ–¥—É—é—â–µ–º "
                        "—Ñ–æ—Ä–º–∞—Ç–µ.\n\n<b>AA1234567</b>",
        }
    }
    await msg.answer(TEXTS[data.get('language')]['err_text'])


@dp.message_handler(state=ApplicantRegisterStates.birth_date, content_types=ContentType.TEXT,
                    regexp=r'^(0[1-9]|[12][0-9]|3[01])[-.](0[1-9]|1[012])[-.](19|20)\d{2}$')
async def send_birth_date(msg: types.Message, state: FSMContext):
    birthDateText = msg.text
    separator = '-' if '-' in birthDateText else '.'
    birthDate = datetime.strptime(birthDateText, f'%d{separator}%m{separator}%Y').date()
    data = await state.get_data()
    language = data.get('language', 'ru')

    TEXTS = {
        'uz': {
            'one_resp_text': (
                "Talabalik - oltin davr deyishadi. Shu davrni bizning universitetda o'tkazishga ahd qilganingizdan "
                "xursandmiz. O'z navbatida biz ham sizga sifatli ta'lim berishga, kelajakda yetuk mutaxassis bo'lib "
                "yetishingizga yordam berishga tayyormiz!"
            ),
            'pinfl_exist_text': ("‚ùóÔ∏è Bunday passport ma'lumotlari bilan hujjat topshirilgan. Iltimos, "
                                 "qayta hujjat topshiring:"),
            'checking': "‚ôªÔ∏è Ma'lumotlar tekshirilmoqda",
            'data_error': "‚ùóÔ∏è Passport ma'lumotlari xato bo'lishi mumkin. Iltimos, tekshirib qayta kiriting.",
            'unknown_error': "‚ùóÔ∏è Noma'lum xatolik. Iltimos, qayta kiriting.",
            'exists_phone': ("‚ùóÔ∏è Siz telegram kontakt raqamingiz bilan üëâ qabul.usat.uz sayti orqali ro'yxatdan "
                             "o'tgansiz."),
        },
        'ru': {
            'one_resp_text': (
                "–°—Ç—É–¥–µ–Ω—á–µ—Å—Ç–≤–æ –Ω–∞–∑—ã–≤–∞—é—Ç –∑–æ–ª–æ—Ç–æ–π —ç–ø–æ—Ö–æ–π. –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –≤ –Ω–∞—à–µ–º "
                "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ. –í —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –º—ã —Ç–∞–∫–∂–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–º–æ—á—å –≤–∞–º "
                "—Å—Ç–∞—Ç—å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –≤ –±—É–¥—É—â–µ–º!"
            ),
            'pinfl_exist_text': ("‚ùóÔ∏è –° –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏ —Å —Ç–∞–∫–∏–º–∏ –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —É–∂–µ –±—ã–ª–∞ –ø–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, "
                                 "–ø–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É —Å–Ω–æ–≤–∞."),
            'checking': "‚ôªÔ∏è –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä—è—é—Ç—Å—è",
            'data_error': "‚ùóÔ∏è –í –ø–∞—Å–ø–æ—Ä—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            'unknown_error': "‚ùóÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            'exists_phone': ("‚ùóÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ —Å–∞–π—Ç–µ üëâ qabul.usat.uz —Å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–∞ "
                             "Telegram."),

        }
    }

    async def handle_error(message, error_key):
        await message.answer(TEXTS[language][error_key],
                             reply_markup=menu_markup_uz if language == 'uz' else menu_markup_ru)
        await state.finish()

    applicant_exists = await db.get_applicant(msg.from_user.id, data.get('passport'), birthDate)
    if applicant_exists:
        await handle_error(msg, 'pinfl_exist_text')
        return

    no_data = True
    user_data_resp = await get_applicant_in_admission(msg.from_user.id)
    if user_data_resp.status_code == 200:
        user_data = user_data_resp.json()
        if user_data.get('jshir'):
            data.update({
                'applicantId': user_data.get('id'),
                'applicantNumber': user_data.get('applicantNumber'),
                'pinfl': user_data.get('jshir'),
                'firstName': user_data.get('firstName'),
                'lastName': user_data.get('lastName'),
                'middleName': user_data.get('middleName'),
                'gender': user_data.get('gender'),
                'photo': user_data.get('photo'),
                'birthDate': datetime.strptime(user_data.get('birthDate'), '%Y-%m-%dT%H:%M:%SZ').date(),
                'passport': user_data.get('passportNumber'),
                'phoneNumber': user_data.get('mobilePhone')
            })
            no_data = False
    if no_data:
        data.update({'birthDate': birthDate})
        resp = await signup_applicant(**data)
        if resp.status_code == 201:
            await msg.answer(TEXTS[language]['checking'])
            await asyncio.sleep(2)
            user_data_resp = await get_applicant_in_admission(msg.from_user.id)
            if user_data_resp.status_code == 200:
                user_data = user_data_resp.json()
                if user_data.get('jshir'):
                    data.update({
                        'applicantId': user_data.get('id'),
                        'applicantNumber': user_data.get('applicantNumber'),
                        'pinfl': user_data.get('jshir'),
                        'firstName': user_data.get('firstName'),
                        'lastName': user_data.get('lastName'),
                        'middleName': user_data.get('middleName'),
                        'gender': user_data.get('gender'),
                        'photo': user_data.get('photo')
                    })
                else:
                    await handle_error(msg, 'data_error')
                    return
            else:
                await handle_error(msg, 'unknown_error')
                return
        elif resp.status_code == 400:
            error_meta = resp.json().get('meta', {})
            if 'phone' in error_meta:
                await handle_error(msg, 'exists_phone')
                return
            else:
                await msg.answer(error_meta.get('general_errors', [TEXTS[language]['unknown_error']])[0],
                                 reply_markup=menu_markup_uz if language == 'uz' else menu_markup_ru)
                await state.finish()
                return
        else:
            await handle_error(msg, 'unknown_error')
            return

    await db.add_draft_applicant(**data)
    fullname = data.get('firstName') + ' ' + data.get('lastName')
    await state.update_data(data)
    await msg.answer(TEXTS[language]['one_resp_text'])
    await asyncio.sleep(0.5)
    await show_faculties(msg, language, fullname)
    await ApplicantRegisterStates.next()


@dp.message_handler(state=ApplicantRegisterStates.birth_date, content_types=ContentType.ANY)
async def err_send_birth_date(msg: types.Message, state: FSMContext):
    await msg.delete()
    data = await state.get_data()
    language = data.get('language')
    TEXTS = {
        'uz': {
            'err_text': ("‚ùóÔ∏è Tug'ilgan sanangizni ko'rsatilgan formatda yuboring.\n\nMisol uchun: 01.01.2000 yoki "
                         "01-01-2000"),
        },
        'ru': {
            'err_text': "‚ùóÔ∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: 01.01.2000 –∏–ª–∏ 01-01-2000",
        }
    }
    await msg.answer(TEXTS[language]['err_text'])


@dp.callback_query_handler(application_callback_data.filter(), state=ApplicantRegisterStates.direction_type_lan)
async def select_application_func(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    fullname = data.get('fullname')
    direction_id = callback_data.get('direction_id')
    type_id = callback_data.get('type_id')
    edu_language = callback_data.get('edu_language')
    level = callback_data.get('level')
    if level == '0':
        await show_faculties(call, language, fullname)
    elif level == '1':
        await show_types_and_contracts(call, direction_id, language)
    elif level == '2':
        await show_edu_languages(call, direction_id, type_id, language)
    elif level == '3':
        await save_send_data_admission(call, direction_id, type_id, edu_language, language, fullname, state)


async def show_faculties(call, language, fullname):
    resp_texts = {
        'uz': {
            'question': ("Hurmatli {}! Aytingchi, siz universitetimizdagi qaysi ta'lim yo'nalishiga hujjatlaringizni "
                         "topshirmoqchisiz?")
        },
        'ru': {
            'question': ("–£–≤–∞–∂–∞–µ–º—ã–π {}! –°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –≤—ã "
                         "—Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?")
        }
    }
    if isinstance(call, types.Message):
        await call.answer("‚úÖ Tasdiqlangan foydalanuvchi!" if language == 'uz' else "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!",
                          reply_markup=ReplyKeyboardRemove())
        await call.answer(resp_texts[language]['question'].format(fullname),
                          reply_markup=await all_faculties_inlines(language))
    else:
        await call.message.edit_text(resp_texts[language]['question'].format(fullname),
                                     reply_markup=await all_faculties_inlines(language))


async def show_types_and_contracts(call, direction_id, language):
    if language == 'uz':
        question = ("Aytingchi, qaysi ta'lim shaklida o'qishni rejalashtirgangiz?\n\nKunduzgi ta'lim odatda ertalab "
                    "09:00 dan boshlanib, o'rtacha 14:00 gacha davom etadi. Kechki ta'lim - 16:00 dan 20:00 gacha "
                    "davom etadi va kontrakt narxlari judayam past. Sirtqi ta'lim talabalari yiliga 2 marta 1 oyga "
                    "chaqiriladi, shu sababli kontrakt narxlari eng past hisoblanadi. Bunda talaba ham ishlab, "
                    "ham o'qish imkoniyatiga ega bo'ladi.")
    else:
        question = ("–°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ –æ–±—É—á–µ–Ω–∏—è –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—á–∏—Ç—å—Å—è?\n\n–î–Ω–µ–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ "
                    "–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 09:00 —É—Ç—Ä–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –ø—Ä–∏–º–µ—Ä–Ω–æ 14:00. –í–µ—á–µ—Ä–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç—Å—è —Å 16:00 –¥–æ "
                    "20:00, –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∑–∞–º–µ—Ç–Ω–æ –Ω–∏–∂–µ. –ó–∞–æ—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–∏–µ–∑–∂–∞—é—Ç "
                    "–¥–≤–∞ —Ä–∞–∑–∞ –≤ –≥–æ–¥ –Ω–∞ –º–µ—Å—è—Ü, –ø–æ—ç—Ç–æ–º—É —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π. –≠—Ç–æ –¥–∞–µ—Ç "
                    "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ —É—á–∏—Ç—å—Å—è.")
    await call.message.edit_text(question, reply_markup=await types_and_contracts(direction_id, language))


async def show_edu_languages(call, direction_id, type_id, language):
    direction = await db.select_direction(direction_id)
    type_of_edu = await db.select_type_of_education(type_id)
    if language == 'uz':
        question = (f"Zo'r! Demak, siz Fan va texnologiyalar universitetining <b>{direction[1]}</b> yo'nalishiga, <b>"
                    f"{type_of_edu[1]}</b> ta'lim shakliga hujjat topshirmoqdasiz. Ta'lim tilini tanlang:")
    else:
        question = (f"–û—Ç–ª–∏—á–Ω–æ! –ò—Ç–∞–∫, –≤—ã –ø–æ–¥–∞–µ—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <b>{direction[2]}</b> –≤ –§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–∞—É–∫–∏ –∏ "
                    f"—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è <b>{type_of_edu[2]}</b>. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è:")
    await call.message.edit_text(question, reply_markup=await choices_e_edu_language(direction_id, type_id, language))


@dp.message_handler(state=ApplicantRegisterStates.direction_type_lan, content_types=ContentType.ANY)
async def err_direction_type_lan(msg: types.Message, state: FSMContext):
    await msg.delete()
    data = await state.get_data()
    lang = data.get('language')
    if lang == 'uz':
        err_info = "‚òùÔ∏è Iltimos, yuqoridagi tugmalardan foydalaning!"
    else:
        err_info = "‚òùÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ!"
    message = await msg.answer(err_info)
    await asyncio.sleep(1.5)
    await message.delete()


async def save_send_data_admission(call, direction_id, type_id, edu_language, lang, fullname, state):
    await db.submit_applicant(call.from_user.id, direction_id, type_id, edu_language)

    data = await state.get_data()
    data.update({
        'directionOfEducationId': direction_id,
        'directionOfEducationName': (await db.select_direction(direction_id))[1 if edu_language == 'uz' else 2],
        'typeOfEducationId': type_id,
        'typeOfEducationName': (await db.select_type_of_education(type_id))[1 if edu_language == 'uz' else 2],
        'languageOfEducationId': 1 if edu_language == 'uz' else 2,
        'languageOfEducationName': edu_language
    })
    resp = await submit_applicant_for_admission(**data)
    if resp.status_code == 404:
        if lang == "uz":
            resp_info = "Siz ariza topshirib bo'lgansiz! Ariza ma'lumotlarini Profilim bo'limida ko'rishingiz mumkin."
        else:
            resp_info = "–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É! –í—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—è–≤–∫–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ü—Ä–æ—Ñ–∏–ª—å."
        await call.message.answer(resp_info)
        return

    if lang == "uz":
        resp_info = f"‚úÖ Hurmatli {fullname}! Arizangiz qabul qilindi!"
        question = ("Tayyor bo'lsangiz, pastdagi \"üßë‚Äçüíª Imtihon topshirish\" tugmasini bosib, test sinovlarini "
                    "o'tishingiz mumkin.\n\n"
                    "Test natijasiga ko'ra yetarlicha ball to'plasangiz, sizga o'qishga qabul "
                    "qilinganingiz haqida xabar chiqadi. Shu zahotiyoq shartnomangizni ko'chirib olishingiz mumkin "
                    "bo'ladi. Yetarlicha ball to'play olmasangiz, yana bir bor urinib ko'rishingizga imkoniyat "
                    "beriladi. Sizga omad tilaymiz!")
        markup = menu_markup_uz
    else:
        resp_info = f"‚úÖ –£–≤–∞–∂–∞–µ–º—ã–π {fullname}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!"
        question = ("–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"üßë‚Äçüíª –°–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω\" –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n"
                    "–ï—Å–ª–∏ –≤—ã –Ω–∞–±–µ—Ä–µ—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞, –≤–∞–º –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–æ –æ "
                    "–∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –Ω–∞ —É—á–µ–±—É. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∞—à –∫–æ–Ω—Ç—Ä–∞–∫—Ç. –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ "
                    "–Ω–µ —Ö–≤–∞—Ç–∏—Ç, –≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑. –ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–∏!")
        markup = menu_markup_ru
    await call.message.edit_text(resp_info, reply_markup=None)
    await asyncio.sleep(0.4)
    await call.message.answer(question, reply_markup=markup)
    # applicant_file = await write_applicant_to_excel(call.from_user.id)
    #
    # # Send the file to all admins
    # for admin_id in ADMINS:
    #     try:
    #         await bot.send_document(admin_id, open(applicant_file, 'rb'), caption="Yangi arizachi",
    #                                 reply_markup=await accept_applicant_inline(call.from_user.id))
    #     except BadRequest:
    #         pass
    # os.remove(applicant_file)
    await state.reset_data()
    await state.finish()
