import asyncio

from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType, InputFile, ReplyKeyboardRemove

from filters import IsPrivate
from keyboards.default import phone_markup_uz, phone_markup_ru, menu_markup_uz, menu_markup_ru
from keyboards.inline import all_faculties_inlines, application_callback_data, types_and_contracts, \
    choices_e_edu_language
from loader import dp, db
from states import ApplicantRegisterStates


@dp.message_handler(IsPrivate(), text="üì∞ Universitetga hujjat topshirish")
async def submit_application_uz(msg: types.Message, state: FSMContext):
    applicant = await db.get_applicant(msg.from_user.id)
    if applicant:
        await msg.answer("‚ùóÔ∏è Siz allaqachon hujjat topshirib bo'lgansiz!")
    else:
        await msg.answer("Pastdagi tugmani bosib, telefon raqamingizni yuboring.", reply_markup=phone_markup_uz)
        await state.set_state(ApplicantRegisterStates.phone)


@dp.message_handler(IsPrivate(), text="üì∞ –ü–æ–¥–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç")
async def submit_application_ru(msg: types.Message, state: FSMContext):
    applicant = await db.get_applicant(msg.from_user.id)
    if applicant:
        await msg.answer("‚ùóÔ∏è –í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã!")
    else:
        await msg.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=phone_markup_ru)
        await state.set_state(ApplicantRegisterStates.phone)


@dp.message_handler(IsPrivate(), content_types=ContentType.CONTACT, state=ApplicantRegisterStates.phone)
async def send_contact(msg: types.Message, state: FSMContext):
    simple_user = await db.select_simple_user(msg.from_user.id)
    await state.set_data({'phone': msg.contact.phone_number,
                          'language': simple_user[2]})
    if simple_user[2] == 'uz':
        info = "Qo'shimcha telefon raqam yuboring."
    else:
        info = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
    await msg.answer(info, reply_markup=ReplyKeyboardRemove())
    await ApplicantRegisterStates.next()


@dp.message_handler(IsPrivate(), content_types=ContentType.ANY, state=ApplicantRegisterStates.phone)
async def send_contact(msg: types.Message):
    await msg.delete()
    simple_user = await db.select_simple_user(msg.from_user.id)
    if simple_user[2] == 'uz':
        info = "Iltimos, pastdagi tugmani bosib, telefon raqamingizni yuboring."
        markup = phone_markup_uz
    else:
        info = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        markup = phone_markup_ru
    await msg.answer(info, reply_markup=markup)


@dp.message_handler(IsPrivate(), content_types=ContentType.TEXT, state=ApplicantRegisterStates.additional_phone)
async def send_contact(msg: types.Message, state: FSMContext):
    simple_user = await db.select_simple_user(msg.from_user.id)
    await state.update_data({'additional_phone': msg.text})
    if simple_user[2] == 'uz':
        info = "ID-kartangizdagi Shaxsiy raqamingizni kiriting. "
        image = InputFile('data/images/pinfl.jpg')
        image_url = "http://telegra.ph//file/97b3043fbcdc89ba48360.jpg"
    else:
        info = "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä, —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞ ID-–∫–∞—Ä—Ç–µ."
        image = InputFile('data/images/pinfl_ru.jpg')
        image_url = "http://telegra.ph//file/e815e58a3c4c08948b617.jpg"
    try:
        await msg.answer_photo(image_url, caption=info, reply_markup=ReplyKeyboardRemove())
    except:
        await msg.answer_photo(image, caption=info, reply_markup=ReplyKeyboardRemove())
    await ApplicantRegisterStates.next()


@dp.message_handler(IsPrivate(), content_types=ContentType.ANY, state=ApplicantRegisterStates.additional_phone)
async def send_contact(msg: types.Message):
    await msg.delete()
    simple_user = await db.select_simple_user(msg.from_user.id)
    if simple_user[2] == 'uz':
        info = "Iltimos, qo'shimcha telefon raqamingizni yuboring."
        markup = phone_markup_uz
    else:
        info = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."
        markup = phone_markup_ru
    await msg.answer(info, reply_markup=markup)


@dp.message_handler(state=ApplicantRegisterStates.pinfl, content_types=ContentType.TEXT)
async def send_pinfl(msg: types.Message, state: FSMContext):
    pinfl = msg.text
    data = await state.get_data()
    language = data.get('language', 'ru')
    TEXTS = {
        'uz': {
            'err_text': "‚ùóÔ∏è Shaxsiy raqam xato. Iltimos, qayta yuboring.",
            'one_resp_text': (
                "Talabalik - oltin davr deyishadi. Shu davrni bizning universitetda o'tkazishga ahd qilganingizdan "
                "xursandmiz. O'z navbatida biz ham sizga sifatli ta'lim berishga, kelajakda yetuk mutaxassis bo'lib "
                "yetishingizga yordam berishga tayyormiz!"
            ),
            'question': (
                "Hurmatli {}! Aytingchi, siz universitetimizdagi qaysi ta'lim yo'nalishiga hujjatlaringizni "
                "topshirmoqchisiz?"
            ),
            'pinfl_exist_text': "‚ùóÔ∏è Bunday shaxsiy raqam yoki telefon raqam bilan hujjat topshirilgan. Iltimos, "
                                "qayta kiriting:"
        },
        'ru': {
            'err_text': "‚ùóÔ∏è –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —É–∫–∞–∑–∞–Ω –Ω–µ–≤–µ—Ä–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.",
            'one_resp_text': (
                "–°—Ç—É–¥–µ–Ω—á–µ—Å—Ç–≤–æ –Ω–∞–∑—ã–≤–∞—é—Ç –∑–æ–ª–æ—Ç–æ–π —ç–ø–æ—Ö–æ–π. –ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥ –≤ –Ω–∞—à–µ–º "
                "—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ. –í —Å–≤–æ—é –æ—á–µ—Ä–µ–¥—å, –º—ã —Ç–∞–∫–∂–µ –≥–æ—Ç–æ–≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏ –ø–æ–º–æ—á—å –≤–∞–º "
                "—Å—Ç–∞—Ç—å –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –≤ –±—É–¥—É—â–µ–º!"
            ),
            'question': (
                "–£–≤–∞–∂–∞–µ–º—ã–π {}! –°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –≤—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å "
                "–ø–æ–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?"
            ),
            'pinfl_exist_text': "‚ùóÔ∏è –î–æ–∫—É–º–µ–Ω—Ç—ã —Å —Ç–∞–∫–∏–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏–ª–∏ –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ –ø–æ–¥–∞–Ω—ã. "
                                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ:"
        }
    }
    # Validate PINFL
    if pinfl.isdigit() and len(pinfl) == 14:
        if await db.get_applicant(msg.from_user.id, pinfl, data.get('phone')):
            await msg.answer(TEXTS[language]['pinfl_exist_text'])
            return

        # pinflni admissionga post qilish kerak
        fullname = msg.from_user.full_name  # Retrieve fullname from admission data
        await state.update_data({'pinfl': pinfl, 'fullname': fullname})
        await msg.answer(TEXTS[language]['one_resp_text'])
        await ApplicantRegisterStates.next()
        await asyncio.sleep(1.5)
        await msg.answer(TEXTS[language]['question'].format(fullname), reply_markup=await all_faculties_inlines(language))
        return

    # Handle invalid PINFL
    await msg.answer(TEXTS[language]['err_text'])


@dp.message_handler(state=ApplicantRegisterStates.pinfl, content_types=ContentType.ANY)
async def err_send_pinfl(msg: types.Message, state: FSMContext):
    data = await state.get_data()
    await msg.delete()
    if data.get('language') == 'uz':
        err_resp = "Iltimos, ID-kartangizdagi Shaxsiy raqamingizni kiriting."
    else:
        err_resp = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–∏—á–Ω—ã–π –Ω–æ–º–µ—Ä, —É–∫–∞–∑–∞–Ω–Ω—ã–π –Ω–∞ –≤–∞—à–µ–π ID-–∫–∞—Ä—Ç–µ."
    await msg.answer(err_resp)


@dp.callback_query_handler(application_callback_data.filter(), state=ApplicantRegisterStates.direction_type_lan)
async def select_application_func(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    data = await state.get_data()
    language = data.get('language')
    fullname = data.get('fullname')
    direction_id = callback_data.get('direction_id')
    type_id = callback_data.get('type_id')
    edu_language = callback_data.get('edu_language')
    level = callback_data.get('level')
    if level == '0':
        await show_faculties(call, language, fullname)
    elif level == '1':
        await show_types_and_contracts(call, direction_id, language)
    elif level == '2':
        await show_edu_languages(call, direction_id, type_id, language)
    elif level == '3':
        await send_data_admission(call, direction_id, type_id, edu_language, language, fullname, state)


async def show_faculties(call, language, fullname):
    resp_texts = {
        'uz': {
            'question': ("Hurmatli {}! Aytingchi, siz universitetimizdagi qaysi ta'lim yo'nalishiga hujjatlaringizni "
                         "topshirmoqchisiz?")
        },
        'ru': {
            'question': ("–£–≤–∞–∂–∞–µ–º—ã–π {}! –°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞ –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è –≤ –Ω–∞—à–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –≤—ã "
                         "—Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–¥–∞–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã?")
        }
    }
    await call.message.edit_text(resp_texts[language]['question'].format(fullname),
                                 reply_markup=await all_faculties_inlines(language))


async def show_types_and_contracts(call, direction_id, language):
    if language == 'uz':
        question = ("Aytingchi, qaysi ta'lim shaklida o'qishni rejalashtirgangiz?\n\nKunduzgi ta'lim odatda ertalab "
                    "09:00 dan boshlanib, o'rtacha 14:00 gacha davom etadi. Kechki ta'lim - 16:00 dan 20:00 gacha "
                    "davom etadi va kontrakt narxlari judayam past. Sirtqi ta'lim talabalari yiliga 2 marta 1 oyga "
                    "chaqiriladi, shu sababli kontrakt narxlari eng past hisoblanadi. Bunda talaba ham ishlab, "
                    "ham o'qish imkoniyatiga ega bo'ladi.")
    else:
        question = ("–°–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ –∫–∞–∫–æ–π —Ñ–æ—Ä–º–µ –æ–±—É—á–µ–Ω–∏—è –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —É—á–∏—Ç—å—Å—è?\n\n–î–Ω–µ–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ–±—ã—á–Ω–æ "
                    "–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ 09:00 —É—Ç—Ä–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –¥–æ –ø—Ä–∏–º–µ—Ä–Ω–æ 14:00. –í–µ—á–µ—Ä–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç—Å—è —Å 16:00 –¥–æ "
                    "20:00, –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ –∑–∞–º–µ—Ç–Ω–æ –Ω–∏–∂–µ. –ó–∞–æ—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç, —á—Ç–æ —Å—Ç—É–¥–µ–Ω—Ç—ã –ø—Ä–∏–µ–∑–∂–∞—é—Ç "
                    "–¥–≤–∞ —Ä–∞–∑–∞ –≤ –≥–æ–¥ –Ω–∞ –º–µ—Å—è—Ü, –ø–æ—ç—Ç–æ–º—É —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è —Å–∞–º–æ–π –Ω–∏–∑–∫–æ–π. –≠—Ç–æ –¥–∞–µ—Ç "
                    "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∏ —É—á–∏—Ç—å—Å—è.")
    await call.message.edit_text(question, reply_markup=await types_and_contracts(direction_id, language))


async def show_edu_languages(call, direction_id, type_id, language):
    direction = await db.select_direction(direction_id)
    type_of_edu = await db.select_type_of_education(type_id)
    if language == 'uz':
        question = (f"Zo'r! Demak, siz Fan va texnologiyalar universitetining <b>{direction[1]}</b> yo'nalishiga, <b>"
                    f"{type_of_edu[1]}</b> ta'lim shakliga hujjat topshirmoqdasiz. Ta'lim tilini tanlang:")
    else:
        question = (f"–û—Ç–ª–∏—á–Ω–æ! –ò—Ç–∞–∫, –≤—ã –ø–æ–¥–∞–µ—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ <b>{direction[2]}</b> –≤ –§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–∞—É–∫–∏ –∏ "
                    f"—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è <b>{type_of_edu[2]}</b>. –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –æ–±—É—á–µ–Ω–∏—è:")
    await call.message.edit_text(question, reply_markup=await choices_e_edu_language(direction_id, type_id, language))


@dp.message_handler(state=ApplicantRegisterStates.direction_type_lan, content_types=ContentType.ANY)
async def err_direction_type_lan(msg: types.Message, state: FSMContext):
    await msg.delete()
    data = await state.get_data()
    lang = data.get('language')
    if lang == 'uz':
        err_info = "‚òùÔ∏è Iltimos, yuqoridagi tugmalardan foydalaning!"
    else:
        err_info = "‚òùÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ!"
    message = await msg.answer(err_info)
    await asyncio.sleep(1.5)
    await message.delete()


async def send_data_admission(call, direction_id, type_id, edu_language, lang, fullname, state):
    data = await state.get_data()
    phone = data.get('phone')
    additional_phone = data.get('additional_phone')
    pinfl = data.get('pinfl')
    firstName = data.get('firstName')
    lastName = data.get('lastName')
    middleName = data.get('middleName')
    passport = data.get('passport')
    olympian = data.get('olympian', False)
    await db.add_applicant(call.from_user.id, phone, additional_phone, pinfl, firstName, lastName, middleName, passport, direction_id,
                           type_id, edu_language, olympian)
    # shu yerda admissionga barcha datalarni yuborish kerak
    if lang == "uz":
        resp_info = f"‚úÖ Hurmatli {fullname}! Arizangiz qabul qilindi!"
        question = ("Tayyor bo'lsangiz, pastdagi \"Imtihon topshirish\" tugmasini bosib, test sinovlarini o'tishingiz "
                    "mumkin.\n\nTest natijasiga ko'ra yetarlicha ball to'plasangiz, sizga o'qishga qabul "
                    "qilinganingiz haqida xabar chiqadi. Shu zahotiyoq shartnomangizni ko'chirib olishingiz mumkin "
                    "bo'ladi. Yetarlicha ball to'play olmasangiz, yana bir bor urinib ko'rishingizga imkoniyat "
                    "beriladi. Sizga omad tilaymiz!")
        markup = menu_markup_uz
    else:
        resp_info = f"‚úÖ –£–≤–∞–∂–∞–µ–º—ã–π {fullname}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!"
        question = ("–ö–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–°–¥–∞—Ç—å —ç–∫–∑–∞–º–µ–Ω\" –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n–ï—Å–ª–∏ –≤—ã "
                    "–Ω–∞–±–µ—Ä–µ—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–ª–ª–æ–≤ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∞, –≤–∞–º –±—É–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–æ –æ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ –Ω–∞ "
                    "—É—á–µ–±—É. –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∫–∞—á–∞—Ç—å –≤–∞—à –∫–æ–Ω—Ç—Ä–∞–∫—Ç. –ï—Å–ª–∏ –Ω–∞–±—Ä–∞–Ω–Ω—ã—Ö –±–∞–ª–ª–æ–≤ –Ω–µ —Ö–≤–∞—Ç–∏—Ç, "
                    "–≤–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ —Ä–∞–∑. –ñ–µ–ª–∞–µ–º –≤–∞–º —É–¥–∞—á–∏!")
        markup = menu_markup_ru
    await call.message.edit_text(resp_info, reply_markup=None)
    await asyncio.sleep(0.4)
    await call.message.answer(question, reply_markup=markup)
    await state.reset_data()
    await state.finish()
